# start with
# https://gitpod.io/#/https://github.com/dominique-quevy/myGitpodFlutter
# https://gitpod.io/#prebuild/https://github.com/dominique-quevy/myGitpodFlutter


# -------------------------------------------------------------------------------


# https://www.gitpod.io/docs/introduction/getting-started/quickstart/flutter

# Flutter Quickstart
# Learn how to set-up and understand the benefits of Gitpod in less than 5 min with our Flutter template.

# The following guide will:

# Walk you through a real world example with an existing Gitpod config
# Introduce you to prebuilds
# Demonstrate the benefits of ephemeral developer environments
# For simplicity we use a GitHub template, but Gitpod works similarly with GitLab and Bitbucket.

# Step 1: Clone Git repository
# Create a new repository based on the Flutter template.
# Name it e.g. my-flutter-template.
# Step 2: Install Gitpod app
# Install the Gitpod App.

# Gitpodâ€™s GitHub app is similar to a CI server and will continuously prepare prebuilds for all your branches and pull requests - so you donâ€™t have to wait for installation of dependencies from the internet when you want to start coding.

# Step 3: First prebuild
# Start your first workspace with a prebuild by prefixing https://gitpod.io#prebuild/ to the URL of the repository.
# The revised URL is: https://gitpod.io/#prebuild/https://github.com/<github_username>/my-flutter-template

# Gitpod displays the prebuild progress status by running the init commands in the .gitpod.yml file before you even start a workspace. Later, when you create a new workspace on a branch, or pull/merge request the workspace loads much faster, because all dependencies are already downloaded and the code is compiled. For more information see prebuilds.

# Step 4: Enjoy being ready-to-code ðŸ¤™
# Once the first prebuild ran, Gitpod starts an automated and fully configured developer environment in a workspace that is now ready for you to develop.

# Other developers made their setup even more productive and supercharged their workflows with the following quick steps:

# Installing the browser extension
# You can install the Gitpod browser extension on any Chromium-based browsers such as Microsoft Edge, Brave, Chrome, and others, or on a Firefox browser.

# The extension simply adds a Gitpod button on every project and branch across GitHub, and Bitbucket that prefixes the URL with gitpod.io/# so that you can easily open a new workspace from any Git context.

# Browser Extension

# If you prefer to not install browser extensions then you can use the Gitpod browser bookmarklet instead.

# For our partner GitLab we have a native integration into their UI that you can enable here.

# Add your favorite VS Code themes and extensions
# You have access to all Visual Studio Code extensions published under the vendor neutral Open VSX registry. Install one by clicking the Extensions icon in the left sidebar and enter your favorite theme or VS Code extension.

# Changes you make in your workspace such as themes and extensions are synced automatically to other workspaces.

# Start throwing away workspaces like paper towels
# You can now start to treat dev environments as automated resources you spin up when you need them and close down (and forget about) when you are done with your task. Dev environments become fully ephemeral.

# You even can start switching between workspaces or open several workspaces on the same context - two for your feature, one for reviewing a PR/MR, one for a bug, one for another MR/PR.

# Try it out and open 3 workspaces on the same context (e.g. on main or on an issue). ðŸ¤“

# Next Steps
# Youâ€™ve successfully ran your first workspace and experienced first hand what we mean with ephemeral dev environments. This is just the first step on your journey towards being always ready to code. Helpful resources from here are:

# Getting started with your own project
# Git Integrations


# -------------------------------------------------------------------------------


# https://github.com/settings/installations

# gitpod.io (installed in github as application)
# Installed 19 minutes ago  Developed by gitpod-io  https://www.gitpod.io
# Always ready to code - spin up fresh, automated dev environments for each task, in the cloud, in seconds.

# How it works

# Gitpod is an open-source Kubernetes application for automated and ready-to-code development environments that blends in your existing workflow. It enables you to describe your dev environment as code and start instant and fresh development environments for each new task directly from your browser.
# It can be started on any GitHub URL by prefixing it with gitpod.io#.

# Gitpod Bot does two things:

# generate Gitpod links for pull requests and add them to the description,
# prebuild workspaces for branches and pull requests.
# Installation
# To install the app, make sure you are logged in to Gitpod beforehand.
# After installing the app, configure it using the .gitpod.yml in the default branch:

github:
  prebuilds:
    # enable for the master/default branch (defaults to true)
    master: true
    # enable for all branches in this repo (defaults to false)
    branches: true
    # enable for pull requests coming from this repo (defaults to true)
    pullRequests: true
    # enable for pull requests coming from forks (defaults to false)
    pullRequestsFromForks: true
    # add a "Review in Gitpod" button as a comment to pull requests (defaults to true)
    addComment: true
    # add a "Review in Gitpod" button to pull requests (defaults to false)
    addBadge: false
    # add a label once the prebuild is ready to pull requests (defaults to false)
    addLabel: prebuilt-in-gitpod
# More information
# You can find more information at https://docs.gitpod.io


# -------------------------------------------------------------------------------


# GitPod Flutter TEMPLATE
# https://www.gitpod.io/docs/introduction/getting-started/quickstart/flutter

image:
  file: .gitpod.Dockerfile
tasks:
#  - name: Android Appetize info
    # Gitpod is not able to run emulators within a worspace at this stage as
    # Google Kubernetes Engine does not support Nested Virtualization.
    #
    # If running Gitpod on your own infrastructure or via the Dockerfile locally
    # on infrastructure that exposes vmx or svm then this command will launch
    # the emulator.
    #
    # $ emulator -avd avd28 -no-audio -no-window
    #
    # Until this restriction is mitigated you can run native mobile apps in your
    # browser via https://appetize.io/
#    command: |
#      printf "\033[3J\033c\033[3J"
#      printf 'info[gitpod]: %s\n' \
#        "If you want to build apk/appbundle for Android then you might consider doing the below" \
#        "Appetize can will help you debug your app inside the browser"
#      if test -z "$APPETIZE_API_TOKEN"; then
#          printf '%s\n\n' \
#            "Appetize API token not set. Run:" \
#            "    gp env APPETIZE_API_TOKEN=your_token" \
#            "and create a new workspace in order to get an app preview." \
#            "Request your token here: https://appetize.io/docs#request-api-token if you want to test android builds"
#      else
#          curl -sS --http1.1 "https://$APPETIZE_API_TOKEN@api.appetize.io/v1/apps/$APPETIZE_PUBLICKEY" \
#              -F "file=@/workspace/template-flutter/build/app/outputs/flutter-apk/app.apk" \
#              -F platform=android \
#              -F "buttonText=Start App" \
#              -F "postSessionButtonText=Start App" \
#              > .appetize.json

#          APPETIZE_PUBLICKEY=$(jq -r .publicKey .appetize.json)
#          gp env "APPETIZE_PUBLICKEY=$APPETIZE_PUBLICKEY"
#          export APPETIZE_PUBLICKEY
#          gp preview "https://appetize.io/embed/$APPETIZE_PUBLICKEY?device=pixel4&autoplay=true"
#      fi
  - name: Build for different targets
    init: |
      if test ! -e "pubspec.yaml"; then {
        rm -f /workspace/.template_init
        flutter create --project-name gitpod_flutter_quickstart .
      } fi
      # flutter build -v linux
      flutter build -v web

      ### If you want to build for android, consider uncommenting the below lines
      # flutter build -v bundle
      # flutter build -v appbundle
      # flutter build -v apk

      ### This line is necessary for the below `- name: Run project` to await before proceeding to `flutter run` when prebuilds are not effective
      # We could use `gp sync-[done|await] <id>` but that won't work between `init` and `command`
      touch /workspace/.template_init

  - name: Run project
    command: |
      printf "\033[3J\033c\033[3J" && if test ! -e /workspace/.template_init; then {
        printf 'info[gitpod]: %s\n' "Waiting for the flutter build process to complete ..."
        until test -e /workspace/.template_init; do
          sleep 0.5
        done
      } fi
      flutter run

ports:
  - port: 5900
    onOpen: ignore
    # vnc
  - port: 6080
    onOpen: open-preview
    # flutter
  - port: 8080
    onOpen: ignore
  - port: 5037
    onOpen: ignore
  - port: 9100-9101
    onOpen: ignore
  - port: 40000-50000
    onOpen: ignore

vscode:
  extensions:
    - dart-code.flutter